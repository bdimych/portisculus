-----
общее

делаю в цигвине в xterm
расчитываю также на linux пути делаю с прямым слэшом /



-----
требования
	-ruby
		-библиотека ruby-mp3info - чтобы вынимать длину mp3 и отфильтровывать слишком длинные песни (бывают миксы на час и больше)
	-soundstretch
		определять bpm
		умеет только wav поэтому надо декодировать
	-ffmpeg
		1. декодировать mp3->wav
		2. изменять bpm
	-mplayer
		если soundstretch не определил или определил неправильно,
		то можно посчитать вручную: mplayer играет, юзер нажимает пробел, скрипт считает нажатия



-----
база

просто текстовый файл построчно
/путь/каталог/
[флаг] /путь/каталог/песня1.mp3: bpm1
[флаг] /путь/каталог/песня2.mp3: bpm2

флаг:
"+" - лучшая песня
"-" - пропускать - песня не нравится или например дубль
"=" - чёткого размеренного ритма нет или слишком медленная, но не пропускать её а всё-таки копировать на плеер
	например вступление на альбом или просто хорошая песня отдышаться



-----
1-create-bpm-database.rb

остановить - Ctrl-C

заполняет базу
первое что нужно сделать создать текстовый файл и записать пути к нужным каталогам с музыкой (отдельные файлы тоже можно)
потом запустить
./1-create-bpm-database.rb -dbf bpm-db.txt

предполагается принцип что база одна а источников может быть несколько и не все доступны
по простому говоря есть два компа - на работе и дома и на них я скачал разные песни
и я могу и на работе и дома заполнять плеер но не всеми вообще песнями из базы а только доступными на данном компе
	?кстати думаю может быть хранить вообще в сети?
		?или на большой флэшке?
			ладно, потом соображу...

скрипт найдёт *.mp3 файлы и попробует определить bpm
если автоматом неполучится, то предложит послушать и посчитать вручную

чтобы пересчитать файл
	например
/downloads/artist/song.mp3: 140
	надо в базе сделать:
		чтобы пересчитать автоматически - надо удалить bpm т.е.
/downloads/artist/song.mp3:
		чтобы пересчитать вручную - надо написать "byhands"
/downloads/artist/song.mp3: byhands
		вручную считать приходится потому что
		1. soundstretch достаточно часто определяет половинный или даже четвертьной bpm т.е. вместо 160 может получиться 80 или 40
		2. с другой стороны бывает что основной ритм действительно небыстрый, но за один удар можно сделать два шага



-----
2-fill-player.rb

остановить - Ctrl-C

заполняет плеер

принцип:
есть два режима:
	1) обычный: все файлы в базе
	2) filtered: это когда задан -ob (onlyBest) и/или поисковая фраза

в обычном всё прямолинейно:
цикл по всем песням
	-если bpm входит в заданный range то просто скопировать на плеер
	-если не входит то случайно выбрать bpm из заданного range, пережать mp3 и скопировать
	-если места не осталось то удалять по одному старые файлы на плеере пока не хватит места для нового
	-если и места нет и старых файлов уже не осталось то всё - выход

в filtered режиме сложнее
алгоритм я ещё не сделал но уже видно что получается достаточно путано
я лучше сначала принцип напишу а потом может и алгоритм
что должен делать 2-fill в этом режиме
вот собственно всего 2 ситуации именно для которых я придумал фильтр:
	1) зимой в мороз я хочу вечером облиться и БЫСТРО пробежаться под ЛЮБИМЫЕ песни
		а на след. день в ОБЫЧНОМ режиме на работу
	2) я скачал нового артиста и хочу именно его послушать
то есть 2-fill должен
	-ДОБАВИТЬ ВСЕ ПОДХОДЯЩИЕ под фильтр песни и НЕ УДАЛЯТЬ СТАРЫЕ ПОДХОДЯЩИЕ песни
	-если кроме фильтра задан и другой range - например ускоренный как в примере 1
		то НЕВХОДЯЩИЕ В RANGE песни НЕ УДАЛЯТЬ
		они будут удалены при следующем запуске без фильтра
		т.е. облился пробежался вернулся и вернул обычный режим
само же добавление файлов на плеер как и в обычном режиме
т.е. цикл по подходящим песням и определение/изменение bpm остаются



алгоритм:
???







-----
3-order-files-in-player.rb

алгоритм:







